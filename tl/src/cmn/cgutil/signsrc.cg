if [ $# -eq 0 ]; then exec cado -u -x -S $0; exit $? ; else exec cado -u -x -S $0 "$@"; exit $? ; fi
#!/bin/cado

p = $CG_INFILE:basename

{
UsageStr = << EOF
Usage:  $p [-help] [-verbose] file_names directory_names

This utility signs source files with a license header - CDDL as a default.

Options:
 -help           Display this message.
 -verbose        Show statistics
 -showlicense    Dump the current license template and exit.  Useful
                 as and example for creating a new license template.
 -entab <n>      Also eliminate tabs in the source, using <n> for tab-stop.
 -fixeol         Also add final EOL to files that don't have one.

Environment:
    PROJECT_LICENSE_FILE   if defined, use the contents of this file for the license template.
    LICENSE_URL            url home for the license
    COPYRIGHT_YEARS        copyright range for each source file
    COPYRIGHT_HOLDER       copyright holder for each source file

Example:
 $p ./file1.java dir_1 dir_2 ./file2.xml
EOF
}

Usage := << //
{
    %eecho $UsageStr
}
//

parseArgs := << //
{
    %ifndef CG_ARGV %call Usage
    %ifndef CG_ARGV %halt 1

    DO_HELP = 0
    VERBOSE = 0
    SHOWLICENSE = 0
    FIXEOL = 0
    ENTAB = 0
    ENTAB_SPACES = -1

    %shift arg CG_ARGV
    %whiledef arg %call process_one_arg

    %if $badOptions %call Usage
    %if $badOptions %halt 1

    %if $DO_HELP %call Usage
    %if $DO_HELP %halt 0
}
//

process_one_arg := << //
#if simple file, then add to stack
#if directory, then get list of files in dir and add to stack
#skip non-existent files.
{
    theArg = $arg
    %shift arg CG_ARGV

#%eecho process_one_arg T0 arg='$arg' theArg='$theArg'

    %call parse_one_option
    %if $parsedOption %return

#%eecho process_one_arg T1 theArg='$theArg' check for dir
    #is it a directory?
    %if $theArg:d %call push_dir_list
    %if $theArg:d %return

    #is it a plain file?
    %if $theArg:f %call push_file_name
#%eecho process_one_arg T2 theArg='$theArg' check for plain file FILESTACK=$FILESTACK:stacksize $FILESTACK:showstack
    %if $theArg:f %return

    #otherwise, the arg is unrecognized - display error:
    %eecho ${p}: bad arg, $theArg - IGNORED
}
//

parse_one_option := << //
#parse a single option
{
    badOptions=0
    parsedOption=0
    CG_MATCH_SPEC = /^-/

    %ifnot $theArg:match %return

    #we have an option:
    parsedOption=1

    CG_MATCH_SPEC = /^-h/
    %if $theArg:match DO_HELP = 1
    %if $theArg:match %return

    %call parse_entab
    %if $parsedEntab  badOptions = $badEntabArg
    %if $parsedEntab  %return

    CG_MATCH_SPEC = /^-f/
    %if $theArg:match FIXEOL = 1
    %if $theArg:match %return

    CG_MATCH_SPEC = /^-showlicense/
    %if $theArg:match SHOWLICENSE = 1
    %if $theArg:match %return

    CG_MATCH_SPEC = /^-v/
    %if $theArg:match VERBOSE = 1
    %if $theArg:match %return

    badOptions=1
    %eecho ${p}: bad option, $theArg
}
//

parse_entab := << //
#handle -entab <tab-stop> option
#INPUT:   theArg, arg, CG_ARGV
#OUTPUT:  parsedEntab, ENTAB, ENTAB_SPACES, badEntabArg
{
    parsedEntab = 0
    badEntabArg = 0

    CG_MATCH_SPEC = /^-e/
    %ifnot  $theArg:match %return

    #we found an entab arg:
    parsedEntab = 1
    ENTAB = 1

    #get the next arg:
    theArg = $arg
    %shift  arg CG_ARGV

    %ifndef theArg        badEntabArg = 1
    %if     $badEntabArg  %eecho ${p}:  ERROR:  -entab requires argument specifying the tab-stop.
    %if     $badEntabArg  %return

    %ifnot $theArg:isint  badEntabArg = 1
    %if    $badEntabArg   %eecho ${p}:  ERROR:  -entab argument ($theArg) must be an integer
    %if    $badEntabArg   %return

    #argument is the number of spaces per tab:
    ENTAB_SPACES = $theArg
}
//

push_file_name := << //
{
    theArg2 = ./$theArg
    %push FILESTACK $theArg2
    %void $FILE_CNT:incr:assign
}
//

push_dir_list := << //
{
    #use walkdir to get file-list:
    CG_SHELL_COMMAND_ARGS = -ftxt $theArg
    %void $theDirList:walkdir:assign

#%echo BEFORE SUBSTITUTION:  theDirList=$theDirList
    #$; is used to delimit stack elements:
    CG_SUBSTITUTE_SPEC := s/\n/$;/g
    %void $theDirList:substitute:assign

#%echo AFTER SUBSTITUTION:  theDirList=$theDirList

    %push FILESTACK $theDirList

    %void $DIR_CNT:incr:assign
}
//

dump_stats := << //
{
    %echo Processed $FILE_CNT file arguments
    %echo Processed $DIR_CNT directory arguments
    %echo Processed Found $UNREADABLE_FILE_CNT unreadable files
    %echo Processed a total of $TOTAL_FILE_CNT files
}
//

reset_stats := << //
{
    FILE_CNT = 0
    DIR_CNT = 0
    UNREADABLE_FILE_CNT = 0
    TOTAL_FILE_CNT = 0
}
//

process_one_file := << //
{
    theTextFile = $aTextFile
    infile = $aTextFile
    %shift aTextFile FILESTACK

    %void $TOTAL_FILE_CNT:incr:assign

    %ifnot $theTextFile:r %void $UNREADABLE_FILE_CNT:incr:assign
    %ifnot $theTextFile:r %return -s 1 -e ${p}:  ${theTextFile} is not readable - SKIPPED.

    #SIGNSRC
    %call process_source_file
}
//

process_source_file := << //
# process a single source file
{
    SOURCE_FULLNAME = $infile

    SOURCE_FILENAME = $SOURCE_FULLNAME:basename
    SOURCE_TYPE = $SOURCE_FILENAME:suffix

    %ifdef DEBUG %eecho process_source_file: SOURCE_TYPE=$SOURCE_TYPE SOURCE_FILENAME=$SOURCE_FILENAME

    #optimization - generate the processor name based on suffix and test:
    processor = emit_$SOURCE_TYPE

    #if not pointing to a defined processor:
    %ifndef $processor    %call set_processor

    %call $processor
}
//

set_processor := << //
#set the name of the process based on the file suffix
#processor is set to emit_default routine if suffix is unknown
{
    #this is the default processor:
    processor = emit_default

    CG_MATCH_SPEC = /^(xml|html|bpel|wsdl|xsd|ant)$/
    %if $SOURCE_TYPE:match    processor=emit_xml

    CG_MATCH_SPEC = /^(java|c|h|m|mm|cc)$/
    %if $SOURCE_TYPE:match    processor=emit_java

    CG_MATCH_SPEC = /^(txt|pl|sh|ksh|csh|cg|properties)$/
    %if $SOURCE_TYPE:match    processor=emit_text

    %ifdef DEBUG %eecho T2 processor is $processor
}
//

################################ HEADER TEMPLATE ###############################

set_header_template := << //
{
    %pragma environment  1
    %ifdef PROJECT_LICENSE_FILE   PROJECT_LICENSE_FILE=$PROJECT_LICENSE_FILE
    %pragma environment  0

    %ifdef  PROJECT_LICENSE_FILE   %readtemplate HEADER_TEMPLATE $PROJECT_LICENSE_FILE
    %ifndef PROJECT_LICENSE_FILE   PROJECT_LICENSE_FILE = default

    %ifdef HEADER_TEMPLATE   %return ${p}: NOTE:  using PROJECT_LICENSE_FILE "$PROJECT_LICENSE_FILE"

    #otherwise, define it to be the default:
    HEADER_TEMPLATE := << EOF
{=$COMMENT_BEG=}
{=$COMMENT_MID=} BEGIN_HEADER - DO NOT EDIT
{=$COMMENT_MID=}
{=$COMMENT_MID=} The contents of this file are subject to the terms
{=$COMMENT_MID=} of the Common Development and Distribution License
{=$COMMENT_MID=} (the "License").  You may not use this file except
{=$COMMENT_MID=} in compliance with the License.
{=$COMMENT_MID=}
{=$COMMENT_MID=} You can obtain a copy of the license at
{=$COMMENT_MID=} {=LICENSE_URL=}.
{=$COMMENT_MID=} See the License for the specific language governing
{=$COMMENT_MID=} permissions and limitations under the License.
{=$COMMENT_MID=}
{=$COMMENT_MID=} When distributing Covered Code, include this CDDL
{=$COMMENT_MID=} HEADER in each file and include the License file at
{=$COMMENT_MID=} {=LICENSE_URL=}.
{=$COMMENT_MID=} If applicable add the following below this CDDL HEADER,
{=$COMMENT_MID=} with the fields enclosed by brackets "[]" replaced with
{=$COMMENT_MID=} your own identifying information: Portions Copyright
{=$COMMENT_MID=} [year] [name of copyright owner]
{=$COMMENT_END=}

{=$COMMENT_BEG=}
{=$COMMENT_MID=} @(#){=SOURCE_FILENAME=}
{=$COMMENT_MID=} Copyright {=COPYRIGHT_YEARS=} {=COPYRIGHT_HOLDER=}. All Rights Reserved.
{=$COMMENT_MID=}
{=$COMMENT_MID=} END_HEADER - DO NOT EDIT
{=$COMMENT_END=}
EOF
}

}
//

################################ PRODUCT TOOLS SIGNAGE LIST ###############################

set_template_vars := << //
{
    #set default dates:
    INCEPTION_YEAR=2004

    CG_SHELL_COMMAND_ARGS = '+%Y'
    CURRENT_YEAR=
    CURRENT_YEAR=$CURRENT_YEAR:date:trim

    CG_SHELL_COMMAND_ARGS = '+%m/%d/%Y'
    TODAY=
    TODAY=$TODAY:date:trim

    #read in env. vars.  note:  set to empty-string if not defined.
    %void $LICENSE_URL:nameof:env:a
    %void $COPYRIGHT_YEARS:nameof:env:a
    %void $COPYRIGHT_HOLDER:nameof:env:a

    #set template variables:
    %ifnot $LICENSE_URL           LICENSE_URL =         https://open-esb.dev.java.net/public/CDDLv1.0.html
    %ifnot $COPYRIGHT_YEARS       COPYRIGHT_YEARS =     $INCEPTION_YEAR-$CURRENT_YEAR
    %ifnot $COPYRIGHT_HOLDER      COPYRIGHT_HOLDER =    Sun Microsystems, Inc

    #%undef CG_SHELL_COMMAND_ARGS
}
//

############################# LANGUAGE PROCESSORS ##############################

expand_tabs := << //
#for now we use the shell "expand" command.
#TODO:  this should be a built-in cado op.
#INPUT:  ECHO_TXT
#OUTPUT:  ECHO_TXT
{
    CG_SHELL_COMMAND_ARGS = -$ENTAB_SPACES

    %void $ECHO_TXT:expand:a
}
//

optional_processors := << //
#INPUT:  ECHO_TXT
#OUTPUT:  ECHO_TXT
{
    %if $FIXEOL   %void $ECHO_TXT:fixeol:a
    %if $ENTAB    %call expand_tabs
}
//

emit_default := << //
#default processor for file types that we don't know or care about -
#we just copy input to output.
{
    %eecho ${p}:  WARNING: no processor for $SOURCE_FULLNAME - SKIP
}
//

emit_text := << //
#process a generic text file
{
    %if $VERBOSE %eecho Processing $SOURCE_TYPE file $SOURCE_FILENAME
    s=
    s=$s:space
    COMMENT_BEG = #
    COMMENT_MID = #
    COMMENT_END = #

    #run the header text:
    %evalmacro HEADER_NOTICE HEADER_TEMPLATE

    #read the txt file into a string:
    %readtemplate tmpA $SOURCE_FULLNAME

    #this replaces current header with the macro {=HEADER_NOTICE=}
    tmpB = $tmpA:striptextheader

    #now insert our new header notice:
    %evalmacro ECHO_TXT tmpB

    #apply other processors depending on options:
    %call optional_processors

    echo        $SOURCE_FULLNAME
}
//

emit_xml := << //
#process a xml file
{
    %if $VERBOSE %eecho Processing $SOURCE_TYPE file $SOURCE_FILENAME
    s=
    s=$s:space
    COMMENT_BEG = <!--
    COMMENT_MID = $s#
    COMMENT_END = -->

    #run the header text:
    %evalmacro HEADER_NOTICE HEADER_TEMPLATE

    #read the java file into a string:
    %readtemplate tmpA $SOURCE_FULLNAME

    #this replaces current header with the macro {=HEADER_NOTICE=}
    tmpB = $tmpA:stripxmlheader

    #now insert our new header notice:
    %evalmacro ECHO_TXT tmpB

    #apply other processors depending on options:
    %call optional_processors

    echo        $SOURCE_FULLNAME
}
//

emit_java := << //
#process a java file
{
    %if $VERBOSE %eecho Processing $SOURCE_TYPE file $SOURCE_FILENAME
    s=
    s=$s:space
    COMMENT_BEG =  /*
    COMMENT_MID = $s*
    COMMENT_END = $s*/

    #run the header text:
    %evalmacro HEADER_NOTICE HEADER_TEMPLATE

    #read the java file into a string:
    %readtemplate tmpA $SOURCE_FULLNAME

    #this replaces current header with the macro {=HEADER_NOTICE=}
    tmpB = $tmpA:stripjavaheader

    #now insert our new header notice:
    %evalmacro ECHO_TXT tmpB

    #apply other processors depending on options:
    %call optional_processors

    echo        $SOURCE_FULLNAME
}
//

display_current_license := << //
{
    %echo ================= Current License File is:  $PROJECT_LICENSE_FILE
    %echo -n $HEADER_TEMPLATE
    %echo ================= EOF =================
}
//

##################################### MAIN #####################################

#%pragma debug 1

CG_ROOT = .
EXIT_STATUS = 0

#this stack holds final list of files to process
FILESTACK =

#reset statistics:
%call reset_stats

#process arguments:
%call parseArgs

#set up the header template:
%call set_header_template

%if $SHOWLICENSE   %call display_current_license
%if $SHOWLICENSE   %return -s 0

%pragma require licenses/signsrc_ops.pl
%call set_template_vars

%shift aTextFile FILESTACK
%whiledef aTextFile %call process_one_file

%if $VERBOSE %call dump_stats

%return -s $EXIT_STATUS
