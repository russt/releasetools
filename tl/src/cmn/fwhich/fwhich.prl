#!/usr/bin/perl -w
#
# BEGIN_HEADER - DO NOT EDIT
# 
# The contents of this file are subject to the terms
# of the Common Development and Distribution License
# (the "License").  You may not use this file except
# in compliance with the License.
#
# You can obtain a copy of the license at
# https://open-esb.dev.java.net/public/CDDLv1.0.html.
# See the License for the specific language governing
# permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL
# HEADER in each file and include the License file at
# https://open-esb.dev.java.net/public/CDDLv1.0.html.
# If applicable add the following below this CDDL HEADER,
# with the fields enclosed by brackets "[]" replaced with
# your own identifying information: Portions Copyright
# [year] [name of copyright owner]
#

#
# @(#)fwhich.prl - ver 1.1 - 01/04/2006
#
# Copyright 2004-2006 Sun Microsystems, Inc. All Rights Reserved.
# Copyright 2009-2011 Russ Tremain.  All Rights Reserved.
# 
# END_HEADER - DO NOT EDIT
#

# fwhich - fast version of old ucb routine with pattern matching.
#
#  07-Jun-1996 (russt)
#   Initial revision
#
#  06-Aug-1996 (russt)
#   Ported to mac, nt
#
#  09-Jan-2011 (russt)
#   No longer reports directories.
#

#require "dumpvar.pl";
#&dumpvar('main', ENV);

&init_pathname();   #set up path name routines for this os.


#################################### MAIN #####################################

&parse_args;
&init_env();        #get PATH var.

#&dumpvar('main', 'COMMANDS', 'PATH');

for $cmd (@COMMANDS) {
    @fwhich = &which($cmd);
    &path_report(*fwhich);
}

exit(0);
&squawk_off;

################################ FWHICH ROUTINES ##############################

sub path_report
{
    local (*fwhich) = @_;

    for $cmd (@fwhich) {
        printf("%s\n", $cmd);
        last unless ($PATTERN_FLAG || $ALLPATHS);
    }
}

sub which
#look for a tool name expression in the @PATH
{
    local ($tool) = @_;
    local (@lsout, @files, @foundpaths, @new);

    @foundpaths = ();


    for $path (@PATH) {
        local ($ff) = &mkpathname($path, $tool);
        if (!$PATTERN_FLAG) {
#printf("ff='%s', OS=%d e1=%d e2=%d\n", $ff, $OS,
#($OS == $NT) , (-r $ff || -r "$ff.ksh" || -r "$ff.exe" || -r "$ff.bat") );
#printf("ff='%s', OS=%d e1=%d e2=%d\n", $ff, $OS, ($OS == $MACINTOSH), (-r $ff));

            if ( (($OS == $UNIX) && (-x $ff) && !(-d $ff)) || (($OS == $MACINTOSH) && (-r $ff)))
            {
                @foundpaths = (@foundpaths, $ff);
            } elsif ($OS == $NT) {
                for $xx ($ff, "$ff.ksh", "$ff.exe", "$ff.bat") {
                    if (-r $xx) {
                        @foundpaths = (@foundpaths, $xx);
                    }
                }
            }
        } else {
#printf("path='%s' tool='%s'\n", $path, $tool);
            #get dir listing:
            &ls(*lsout, $path);

            #
            #NOTE:  much faster to do the pattern match
            #before picking out the files, since later operation
            #stats each file.
            #

            if($PRESERVE_CASE) {
                @new = grep($_ =~ /$tool/o, @lsout);
            }
            else {
                @new = grep($_ =~ /$tool/oi, @lsout);
            }

            if (@new) {
                @files = ();
                for (@new) {
                    @files = (@files, &mkpathname($path, $_));
                }

                &pickfiles(*new, *files);
                if (@new) {
                    @foundpaths = (@foundpaths, @new);
                }
            }
        }
    }

    return(@foundpaths);
}

sub init_env
{
#printf("init_env:  OS=%d PATHVAR='%s'\n", $OS, $PATHVAR);
    #get path environment var:
    @PATH = split($CPS, $ENV{$PATHVAR});

    if ($#PATH < 0) {
        printf STDERR ("%s:  can't get path variable!\n", $p);
        exit(1);
    }
}

################################ PATH UTILITIES ###############################

sub pickfiles
#pick the plain file entries from a directory listing.
#<lsout> must be in CWD or contain full path refs.
#list returned in <thefiles>.
{
    local (*thefiles, *lsout) = @_;

    @thefiles = grep(!(-d $_), @lsout);
}

sub pwd
#return full pathname of current working directory.
{
    local ($tmp);
    if ($OS == $UNIX) {
        $tmp = (`pwd`);
        chop $tmp;
        return($tmp);
    }
    if ($OS == $MACINTOSH) {
        $tmp = (`Directory`);
        chop $tmp;
        $tmp =~ s/:$//;     #make sure no trailing :
        return($tmp);
    }

    return("NULL");     #not handled
}

sub ls
#<lsout> <-- `ls <dir>`
{
    local (*lsout, $dir) = @_;

    if (!opendir(DIR, $dir)) {
        @lsout = ();
        return;
    }

    #skip drivers on mac, '.' & '..' on unix
    if ($OS == $MACINTOSH) {
        @lsout = readdir(DIR);
    } else {
        @lsout = grep(!/^\.\.?$/,readdir(DIR));
    }

    closedir(DIR);
}

sub path_separator
#what is the separator char used by this filesystem, and how is
#the current directory indicated?
#Returns 9-tuple:
# (current_dir_symbol,
#   volume_separator,
#   input_path_separator,
#   output_path_separator,
#   up_directory,
#   command_PATH_env_var_separator,
#   command_LIBPATH_env_var_separator,
#   PATH_ENV_VAR_NAME
# )
{
    $UNIX = 1; $MACINTOSH=2; $NT=3; $VMS = 4; $DOS = 5; $VMS=$VMS;
    my @unix_setup = ('.', '/', '/', '/', '..', ':', ';', 'PATH');

    if (defined($^O) &&  $^O =~ /cygwin/i) {
        $OS = $UNIX;
        return @unix_setup;
    }

    $OSENV = $ENV{'OS'};
    if ((defined($OSENV) &&  $OSENV eq 'Windows_NT') || $0 =~ /\.ksh$/) {
        $OS = $NT;
        if (defined($ENV{"PATH"})) {
            $PATHVAR = "PATH";
        } else {
            $PATHVAR = "Path";
        }
        return('.', ':', '[\\\/]', '/', '..', ';', ';', $PATHVAR);
    }

    $OSENV = $ENV{'COMSPEC'};
    if (defined($OSENV) || $0 =~ /\.bat$/) {
        $OS = $DOS;
        return('.', ':', '[\\\/]', '/', '..', ';', ';', 'PATH');
    }

    for (@INC) {
        if (/:/) {  #mac
            $OS = $MACINTOSH;
            return (':', ':', ':', ':', '::', ',', ';', 'Commands');
        }
    }

    #default is unix:
    $OS = $UNIX;
    return @unix_setup;
}

sub init_pathname
#initialize standard pathname variables.
{
    ($DOT, $VOLSEP, $PS_IN, $PS_OUT, $UPDIR, $CPS, $LIBPS, $PATHVAR) = &path_separator;

    #set up program name argument:
    local(@tmp) = split($PS_IN, $0);
    # figure out the program name and put it into p
    $p = $tmp[$#tmp];
    $p =~ s/\.ksh$// if ($OS == $NT);
}

sub mkpathname
#convert a list of pathname components to a local path name.
{
    local (@plist) = @_;

    #strip trailing input path-separators:
    for ($ii=0; $ii<=$#plist; $ii++) {
        $plist[$ii] =~ s/${PS_IN}$//;
    }
    
    return(join($PS_OUT, @plist));
}

################################ USAGE SUBROUTINES ###############################

sub usage
{
    local($status) = @_;

    print STDOUT <<"!";
Usage:  $p [-a] [-p] [-P] command_names...

Options:
-a      show ALL locations of command_names in PATH.
-p      match <command_names> as perl regular expression patterns.
-P      match <command_names> as perl regular expression patterns, preserve case.

Example:  $p vi

NOTE:  does not know about aliases - use which(1) to find aliases.
!
    exit($status);
}

sub parse_args
#proccess command-line aguments
{
    $PATTERN_FLAG = 0;
    $PRESERVE_CASE= 0;
    $ALLPATHS = 0;

    local ($flag);

    #eat up flag args:
    while ($#ARGV+1 > 0 && $ARGV[0] =~ /^-/) {
        $flag = shift(@ARGV);

        if ($flag eq '-a') {
            $ALLPATHS = 1;
        } elsif ($flag eq '-P') {
            $PATTERN_FLAG = 1;
            $PRESERVE_CASE= 1;
        } elsif ($flag eq '-p') {
            $PATTERN_FLAG = 1;
        } elsif ($flag =~ '^-h') {
            &usage(0);
        } else {
            &usage(1);
        }
    }

    #take remaining args as command names:
    if ($#ARGV >= 0) {
        @COMMANDS = @ARGV;
    } else {
        &usage(1);
    }
}

sub squawk_off
#shut up extraneous warnings from perl -w option:
{
    if (1 > 2) {
        *pickfiles = *pickfiles;
        *pwd = *pwd;
        *FsType = *FsType;
        *LoginName = *LoginName;
        *NodeName = *NodeName;
        *RegUnloadKey = *RegUnloadKey;
        *RegSetValueEx = *RegSetValueEx;
        *RegSetValue = *RegSetValue;
        *RegSetKeySecurity = *RegSetKeySecurity;
        *RegSaveKey = *RegSaveKey;
        *RegRestoreKey = *RegRestoreKey;
        *RegReplaceKey = *RegReplaceKey;
        *RegQueryValueEx = *RegQueryValueEx;
        *RegQueryValue = *RegQueryValue;
        *RegQueryInfoKey = *RegQueryInfoKey;
        *RegOpenKeyEx = *RegOpenKeyEx;
        *RegOpenKey = *RegOpenKey;
        *RegNotifyChangeKeyValue = *RegNotifyChangeKeyValue;
        *RegLoadKey = *RegLoadKey;
        *RegGetKeySecurity = *RegGetKeySecurity;
        *RegFlushKey = *RegFlushKey;
        *RegEnumValue = *RegEnumValue;
        *RegEnumKeyEx = *RegEnumKeyEx;
        *RegEnumKey = *RegEnumKey;
        *RegDeleteValue = *RegDeleteValue;
        *RegDeleteKey = *RegDeleteKey;
        *RegCreateKeyEx = *RegCreateKeyEx;
        *RegCreateKey = *RegCreateKey;
        *RegConnectRegistry = *RegConnectRegistry;
        *RegCloseKey = *RegCloseKey;
        *Spawn = *Spawn;
        *UPDIR = *UPDIR;
        *VOLSEP = *VOLSEP;
        *CPS = *CPS;
        *DOT = *DOT;
        *PATHVAR = *PATHVAR;
        *LIBPS = *LIBPS;
        *VMS = *VMS;
    }
}
